{
	"info": {
		"_postman_id": "8f157fff-138e-4e6f-b8cc-6db7a0473107",
		"name": "Rasa Open Source HTTP API",
		"description": "The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28258803",
		"_collection_link": "https://www.postman.com/rasahq/workspace/official-rasa-workspace/collection/16884897-8f157fff-138e-4e6f-b8cc-6db7a0473107?action=share&source=collection_link&creator=28258803"
	},
	"item": [
		{
			"name": "conversations/{conversation id}",
			"item": [
				{
					"name": "tracker",
					"item": [
						{
							"name": "events",
							"item": [
								{
									"name": "Append events to a tracker",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "token",
													"type": "string"
												},
												{
													"key": "value",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker",
												"events"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART",
													"description": "Specify which events of the tracker the response should contain."
												},
												{
													"key": "output_channel",
													"value": "slack",
													"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
												},
												{
													"key": "execute_side_effects",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										},
										"description": "Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state. If events are appended to a new conversation ID, the tracker will be initialised with a new session."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"conversation_id\": \"default\",\n \"slots\": [\n  {\n   \"slot_name\": \"slot_value\"\n  },\n  {\n   \"slot_name\": \"slot_value\"\n  }\n ],\n \"latest_message\": {\n  \"text\": \"Hello!\",\n  \"entities\": [\n   {\n    \"start\": -40231944,\n    \"end\": 61222870,\n    \"value\": \"Lorem Ut\",\n    \"entity\": \"magna\",\n    \"confidence\": -51096058.37047937\n   },\n   {\n    \"start\": 47893605,\n    \"end\": 39192948,\n    \"value\": \"consequat Ut\",\n    \"entity\": \"anim\",\n    \"confidence\": -88296661.02188525\n   }\n  ],\n  \"intent\": {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  },\n  \"intent_ranking\": [\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   }\n  ]\n },\n \"latest_event_time\": 1537645578.314389,\n \"followup_action\": \"id sit ut Lorem\",\n \"paused\": false,\n \"events\": [\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  },\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  }\n ],\n \"latest_input_channel\": \"rest\",\n \"latest_action_name\": \"action_listen\",\n \"latest_action\": {\n  \"action_name\": \"nulla sed est\",\n  \"action_text\": \"labore \"\n },\n \"active_loop\": {\n  \"name\": \"restaurant_form\"\n }\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
										},
										{
											"name": "User is not authenticated.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
										},
										{
											"name": "User has insufficient permission.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
										},
										{
											"name": "The request conflicts with the currently loaded model.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
										},
										{
											"name": "An unexpected error occurred.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
										}
									]
								},
								{
									"name": "Replace a trackers events",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "token",
													"type": "string"
												},
												{
													"key": "value",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker",
												"events"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART",
													"description": "Specify which events of the tracker the response should contain."
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										},
										"description": "Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"conversation_id\": \"default\",\n \"slots\": [\n  {\n   \"slot_name\": \"slot_value\"\n  },\n  {\n   \"slot_name\": \"slot_value\"\n  }\n ],\n \"latest_message\": {\n  \"text\": \"Hello!\",\n  \"entities\": [\n   {\n    \"start\": -40231944,\n    \"end\": 61222870,\n    \"value\": \"Lorem Ut\",\n    \"entity\": \"magna\",\n    \"confidence\": -51096058.37047937\n   },\n   {\n    \"start\": 47893605,\n    \"end\": 39192948,\n    \"value\": \"consequat Ut\",\n    \"entity\": \"anim\",\n    \"confidence\": -88296661.02188525\n   }\n  ],\n  \"intent\": {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  },\n  \"intent_ranking\": [\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   }\n  ]\n },\n \"latest_event_time\": 1537645578.314389,\n \"followup_action\": \"id sit ut Lorem\",\n \"paused\": false,\n \"events\": [\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  },\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  }\n ],\n \"latest_input_channel\": \"rest\",\n \"latest_action_name\": \"action_listen\",\n \"latest_action\": {\n  \"action_name\": \"nulla sed est\",\n  \"action_text\": \"labore \"\n },\n \"active_loop\": {\n  \"name\": \"restaurant_form\"\n }\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
										},
										{
											"name": "User is not authenticated.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
										},
										{
											"name": "User has insufficient permission.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
										},
										{
											"name": "The request conflicts with the currently loaded model.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
										},
										{
											"name": "An unexpected error occurred.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
										}
									]
								}
							]
						},
						{
							"name": "Retrieve a conversations tracker",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"tracker"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART",
											"description": "Specify which events of the tracker the response should contain."
										},
										{
											"key": "until",
											"value": "1559744410",
											"description": "All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included."
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								},
								"description": "The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"conversation_id\": \"default\",\n \"slots\": [\n  {\n   \"slot_name\": \"slot_value\"\n  },\n  {\n   \"slot_name\": \"slot_value\"\n  }\n ],\n \"latest_message\": {\n  \"text\": \"Hello!\",\n  \"entities\": [\n   {\n    \"start\": 28658643,\n    \"end\": 11614736,\n    \"value\": \"aliquip\",\n    \"entity\": \"aliqua dolor ex\",\n    \"confidence\": 15609852.604670182\n   },\n   {\n    \"start\": 61837809,\n    \"end\": -67413362,\n    \"value\": \"cillum\",\n    \"entity\": \"officia\",\n    \"confidence\": -9256408.228559688\n   }\n  ],\n  \"intent\": {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  },\n  \"intent_ranking\": [\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   }\n  ]\n },\n \"latest_event_time\": 1537645578.314389,\n \"followup_action\": \"dolore commodo laboris in aliquip\",\n \"paused\": false,\n \"events\": [\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  },\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  }\n ],\n \"latest_input_channel\": \"rest\",\n \"latest_action_name\": \"action_listen\",\n \"latest_action\": {\n  \"action_name\": \"Ut mollit in labore\",\n  \"action_text\": \"dolor ut\"\n },\n \"active_loop\": {\n  \"name\": \"restaurant_form\"\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
								}
							]
						}
					]
				},
				{
					"name": "Retrieve an end-to-end story corresponding to a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"story"
							],
							"query": [
								{
									"key": "until",
									"value": "1559744410",
									"description": "All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included."
								},
								{
									"key": "all_sessions",
									"value": "false",
									"description": "Fetch test stories for all conversation sessions"
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "The story represents the whole conversation in end-to-end format. This can be posted to the '/test/stories' endpoint and used as a test."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/yml"
								}
							],
							"cookie": [],
							"body": "- story: story_00055028\n  steps:\n  - user: |\n      hello\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: |\n      I'm looking for a [moderately priced]{\"entity\": \"price\", \"value\": \"moderate\"} [Indian]{\"entity\": \"cuisine\"} restaurant for [two]({\"entity\": \"people\"}) people\n    intent: inform\n  - action: utter_on_it\n  - action: utter_ask_location"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Run an action in a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"execute"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain."
								},
								{
									"key": "output_channel",
									"value": "slack",
									"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "DEPRECATED. Runs the action, calling the action server if necessary. Any responses sent by the executed action will be forwarded to the channel specified in the output_channel parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"tracker\": {\n  \"conversation_id\": \"default\",\n  \"slots\": [\n   {\n    \"slot_name\": \"slot_value\"\n   },\n   {\n    \"slot_name\": \"slot_value\"\n   }\n  ],\n  \"latest_message\": {\n   \"text\": \"Hello!\",\n   \"entities\": [\n    {\n     \"start\": -94061714,\n     \"end\": -80019828,\n     \"value\": \"sit cillum in sint\",\n     \"entity\": \"cil\",\n     \"confidence\": -29845460.728713885\n    },\n    {\n     \"start\": -97865775,\n     \"end\": -54553869,\n     \"value\": \"do\",\n     \"entity\": \"Duis irure pariatur\",\n     \"confidence\": 102325.20128825307\n    }\n   ],\n   \"intent\": {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   \"intent_ranking\": [\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    },\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"dolore enim est exercitation eu\",\n  \"paused\": false,\n  \"events\": [\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   },\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n   \"action_name\": \"incididunt ullamco non s\",\n   \"action_text\": \"id est\"\n  },\n  \"active_loop\": {\n   \"name\": \"restaurant_form\"\n  }\n },\n \"messages\": [\n  {\n   \"recipient_id\": \"mollit veniam\",\n   \"text\": \"cillum est elit dolore sunt\",\n   \"image\": \"Duis reprehenderit et mollit in\",\n   \"buttons\": [\n    {\n     \"title\": \"amet non quis et nostrud\",\n     \"payload\": \"magna dolore cupidatat\"\n    },\n    {\n     \"title\": \"Excepteur\",\n     \"payload\": \"eiusmod amet\"\n    }\n   ],\n   \"attachement\": [\n    {\n     \"title\": \"sint laborum velit deserunt Ut\",\n     \"payload\": \"sunt id magna exercitation\"\n    },\n    {\n     \"title\": \"occaecat sunt nostrud aliquip\",\n     \"payload\": \"pariatur consectetur amet sit\"\n    }\n   ]\n  },\n  {\n   \"recipient_id\": \"reprehende\",\n   \"text\": \"mollit Excepteur officia magna ut\",\n   \"image\": \"consequat\",\n   \"buttons\": [\n    {\n     \"title\": \"aute aliquip ea quis cupida\",\n     \"payload\": \"laborum velit do\"\n    },\n    {\n     \"title\": \"eu pariatur commodo magna proident\",\n     \"payload\": \"est elit in anim\"\n    }\n   ],\n   \"attachement\": [\n    {\n     \"title\": \"elit culpa\",\n     \"payload\": \"et culpa id aliquip\"\n    },\n    {\n     \"title\": \"co\",\n     \"payload\": \"fugiat dolor\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"utter_greet\",\n    \"policy\": \"velit et ex incididunt\",\n    \"confidence\": 0.987232\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Inject an intent into a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"trigger_intent"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain."
								},
								{
									"key": "output_channel",
									"value": "slack",
									"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Sends a specified intent and list of entities in place of a user message. The bot then predicts and executes a response action. Any responses sent by the executed action will be forwarded to the channel specified in the ``output_channel`` parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"tracker\": {\n  \"conversation_id\": \"default\",\n  \"slots\": [\n   {\n    \"slot_name\": \"slot_value\"\n   },\n   {\n    \"slot_name\": \"slot_value\"\n   }\n  ],\n  \"latest_message\": {\n   \"text\": \"Hello!\",\n   \"entities\": [\n    {\n     \"start\": -94061714,\n     \"end\": -80019828,\n     \"value\": \"sit cillum in sint\",\n     \"entity\": \"cil\",\n     \"confidence\": -29845460.728713885\n    },\n    {\n     \"start\": -97865775,\n     \"end\": -54553869,\n     \"value\": \"do\",\n     \"entity\": \"Duis irure pariatur\",\n     \"confidence\": 102325.20128825307\n    }\n   ],\n   \"intent\": {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   \"intent_ranking\": [\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    },\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"dolore enim est exercitation eu\",\n  \"paused\": false,\n  \"events\": [\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   },\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n   \"action_name\": \"incididunt ullamco non s\",\n   \"action_text\": \"id est\"\n  },\n  \"active_loop\": {\n   \"name\": \"restaurant_form\"\n  }\n },\n \"messages\": [\n  {\n   \"recipient_id\": \"mollit veniam\",\n   \"text\": \"cillum est elit dolore sunt\",\n   \"image\": \"Duis reprehenderit et mollit in\",\n   \"buttons\": [\n    {\n     \"title\": \"amet non quis et nostrud\",\n     \"payload\": \"magna dolore cupidatat\"\n    },\n    {\n     \"title\": \"Excepteur\",\n     \"payload\": \"eiusmod amet\"\n    }\n   ],\n   \"attachement\": [\n    {\n     \"title\": \"sint laborum velit deserunt Ut\",\n     \"payload\": \"sunt id magna exercitation\"\n    },\n    {\n     \"title\": \"occaecat sunt nostrud aliquip\",\n     \"payload\": \"pariatur consectetur amet sit\"\n    }\n   ]\n  },\n  {\n   \"recipient_id\": \"reprehende\",\n   \"text\": \"mollit Excepteur officia magna ut\",\n   \"image\": \"consequat\",\n   \"buttons\": [\n    {\n     \"title\": \"aute aliquip ea quis cupida\",\n     \"payload\": \"laborum velit do\"\n    },\n    {\n     \"title\": \"eu pariatur commodo magna proident\",\n     \"payload\": \"est elit in anim\"\n    }\n   ],\n   \"attachement\": [\n    {\n     \"title\": \"elit culpa\",\n     \"payload\": \"et culpa id aliquip\"\n    },\n    {\n     \"title\": \"co\",\n     \"payload\": \"fugiat dolor\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"greet\",\n    \"entities\": {\n        \"temperature\": \"high\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Predict the next action",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"predict"
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Runs the conversations tracker through the model's policies to predict the scores of all actions present in the model's domain. Actions are returned in the 'scores' array, sorted on their 'score' values. The state of the tracker is not modified."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"scores\": [\n  {\n   \"action\": \"utter_greet\",\n   \"score\": 1\n  },\n  {\n   \"action\": \"utter_greet\",\n   \"score\": 1\n  }\n ],\n \"policy\": \"policy_2_TEDPolicy\",\n \"tracker\": {\n  \"conversation_id\": \"default\",\n  \"slots\": [\n   {\n    \"slot_name\": \"slot_value\"\n   },\n   {\n    \"slot_name\": \"slot_value\"\n   }\n  ],\n  \"latest_message\": {\n   \"text\": \"Hello!\",\n   \"entities\": [\n    {\n     \"start\": -77241025,\n     \"end\": -51888381,\n     \"value\": \"enim aliqua sed non\",\n     \"entity\": \"in cillum\",\n     \"confidence\": 73128171.95002207\n    },\n    {\n     \"start\": 22327386,\n     \"end\": -80742960,\n     \"value\": \"occaecat nisi fugiat\",\n     \"entity\": \"Excepteur in eiusmod\",\n     \"confidence\": -52514395.837644525\n    }\n   ],\n   \"intent\": {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   \"intent_ranking\": [\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    },\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"ea occaecat incididunt est \",\n  \"paused\": false,\n  \"events\": [\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   },\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n   \"action_name\": \"in\",\n   \"action_text\": \"tempor fugiat labore cupidatat\"\n  },\n  \"active_loop\": {\n   \"name\": \"restaurant_form\"\n  }\n }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Add a message to a tracker",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"messages"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Adds a message to a tracker. This doesn't trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"conversation_id\": \"default\",\n \"slots\": [\n  {\n   \"slot_name\": \"slot_value\"\n  },\n  {\n   \"slot_name\": \"slot_value\"\n  }\n ],\n \"latest_message\": {\n  \"text\": \"Hello!\",\n  \"entities\": [\n   {\n    \"start\": -40231944,\n    \"end\": 61222870,\n    \"value\": \"Lorem Ut\",\n    \"entity\": \"magna\",\n    \"confidence\": -51096058.37047937\n   },\n   {\n    \"start\": 47893605,\n    \"end\": 39192948,\n    \"value\": \"consequat Ut\",\n    \"entity\": \"anim\",\n    \"confidence\": -88296661.02188525\n   }\n  ],\n  \"intent\": {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  },\n  \"intent_ranking\": [\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   }\n  ]\n },\n \"latest_event_time\": 1537645578.314389,\n \"followup_action\": \"id sit ut Lorem\",\n \"paused\": false,\n \"events\": [\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  },\n  {\n   \"event\": \"slot\",\n   \"timestamp\": 1559744410\n  }\n ],\n \"latest_input_channel\": \"rest\",\n \"latest_action_name\": \"action_listen\",\n \"latest_action\": {\n  \"action_name\": \"nulla sed est\",\n  \"action_text\": \"labore \"\n },\n \"active_loop\": {\n  \"name\": \"restaurant_form\"\n }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello!\",\n    \"sender\": \"user\",\n    \"parse_data\": {\n        \"text\": \"Hello!\",\n        \"entities\": [\n            {\n                \"start\": 90614158,\n                \"end\": -82356714,\n                \"value\": \"laboris\",\n                \"entity\": \"fugiat in reprehenderit do ut\",\n                \"confidence\": 19035428.291046947\n            },\n            {\n                \"start\": 31151510,\n                \"end\": -57462470,\n                \"value\": \"dolor laborum\",\n                \"entity\": \"id \",\n                \"confidence\": 37997686.79481104\n            }\n        ],\n        \"intent\": {\n            \"confidence\": 0.6323,\n            \"name\": \"greet\"\n        },\n        \"intent_ranking\": [\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            },\n            {\n                \"confidence\": 0.6323,\n                \"name\": \"greet\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				}
			]
		},
		{
			"name": "model",
			"item": [
				{
					"name": "test",
					"item": [
						{
							"name": "Evaluate stories",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/yml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
								},
								"url": {
									"raw": "{{baseUrl}}/model/test/stories?e2e=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"test",
										"stories"
									],
									"query": [
										{
											"key": "e2e",
											"value": "false",
											"description": "Perform an end-to-end evaluation on the posted stories."
										}
									]
								},
								"description": "Evaluates one or multiple stories against the currently loaded Rasa model."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"actions\": [\n  {\n   \"action\": \"utter_ask_howcanhelp\",\n   \"predicted\": \"utter_ask_howcanhelp\",\n   \"policy\": \"policy_0_MemoizationPolicy\",\n   \"confidence\": \"occaecat ut\"\n  },\n  {\n   \"action\": \"utter_ask_howcanhelp\",\n   \"predicted\": \"utter_ask_howcanhelp\",\n   \"policy\": \"policy_0_MemoizationPolicy\",\n   \"confidence\": \"tempor aliquip amet consequat nulla\"\n  }\n ],\n \"is_end_to_end_evaluation\": true,\n \"precision\": 1,\n \"f1\": 0.9333333333333333,\n \"accuracy\": 0.9,\n \"in_training_data_fraction\": 0.8571428571428571,\n \"report\": {\n  \"conversation_accuracy\": {\n   \"accuracy\": 0.19047619047619047,\n   \"correct\": 18,\n   \"with_warnings\": 1,\n   \"total\": 20\n  }\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\""
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
								}
							]
						},
						{
							"name": "Perform an intent evaluation",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"test",
										"intents"
									],
									"query": [
										{
											"key": "model",
											"value": "rasa-model.tar.gz",
											"description": "Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation."
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations",
											"description": "If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request."
										},
										{
											"key": "cross_validation_folds",
											"value": ""
										}
									]
								},
								"description": "Evaluates NLU model against a model or using cross-validation."
							},
							"response": [
								{
									"name": "NLU evaluation result",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"intent_evaluation\": {\n  \"report\": {\n   \"greet\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100,\n    \"confused_with\": {\n     \"chitchat\": 3,\n     \"nlu_fallback\": 5\n    }\n   },\n   \"micro avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   },\n   \"macro avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   },\n   \"weightedq avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   }\n  },\n  \"accuracy\": 0.19047619047619047,\n  \"f1_score\": 0.06095238095238095,\n  \"precision\": 0.036281179138321996,\n  \"predictions\": [\n   {\n    \"intent\": \"greet\",\n    \"predicted\": \"greet\",\n    \"text\": \"hey\",\n    \"confidence\": 0.9973567\n   },\n   {\n    \"intent\": \"greet\",\n    \"predicted\": \"greet\",\n    \"text\": \"hey\",\n    \"confidence\": 0.9973567\n   }\n  ],\n  \"errors\": [\n   {\n    \"text\": \"are you alright?\",\n    \"intent_response_key_target\": \"\",\n    \"intent_response_key_prediction\": {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   },\n   {\n    \"text\": \"are you alright?\",\n    \"intent_response_key_target\": \"sed cillum proident amet id\",\n    \"intent_response_key_prediction\": {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   }\n  ]\n },\n \"response_selection_evaluation\": {\n  \"report\": {\n   \"greet\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100,\n    \"confused_with\": {\n     \"chitchat\": 3,\n     \"nlu_fallback\": 5\n    }\n   },\n   \"micro avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   },\n   \"macro avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   },\n   \"weightedq avg\": {\n    \"precision\": 0.123,\n    \"recall\": 0.456,\n    \"f1-score\": 0.12,\n    \"support\": 100\n   }\n  },\n  \"accuracy\": 0.19047619047619047,\n  \"f1_score\": 0.06095238095238095,\n  \"precision\": 0.036281179138321996,\n  \"predictions\": [\n   {\n    \"intent\": \"greet\",\n    \"predicted\": \"greet\",\n    \"text\": \"hey\",\n    \"confidence\": 0.9973567\n   },\n   {\n    \"intent\": \"greet\",\n    \"predicted\": \"greet\",\n    \"text\": \"hey\",\n    \"confidence\": 0.9973567\n   }\n  ],\n  \"errors\": [\n   {\n    \"text\": \"are you alright?\",\n    \"intent_response_key_target\": \"aliqua non reprehenderit anim commodo\",\n    \"intent_response_key_prediction\": {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   },\n   {\n    \"text\": \"are you alright?\",\n    \"intent_response_key_target\": \"adipisicing ex aute repre\",\n    \"intent_response_key_prediction\": {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   }\n  ]\n },\n \"entity_evaluation\": {}\n}"
								},
								{
									"name": "The incoming request specified a `callback_url` and hence the request will return immediately with an empty response. The actual response will be sent to the provided `callback_url` via POST request.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"rasa_nlu_data\": {\n        \"common_examples\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
								}
							]
						}
					]
				},
				{
					"name": "Replace the currently loaded model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/model",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model"
							]
						},
						"description": "Updates the currently loaded model. First, tries to load the model from the local storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage."
					},
					"response": [
						{
							"name": "Model was successfully replaced.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model_file\": \"/models/20190512.tar.gz\",\n    \"model_server\": {\n        \"url\": \"commodo Lorem dolor\",\n        \"params\": {},\n        \"headers\": {},\n        \"basic_auth\": {},\n        \"token\": \"qui in\",\n        \"token_name\": \"e\",\n        \"wait_time_between_pulls\": 44994371\n    },\n    \"remote_storage\": \"aws\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Unload the trained model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/model",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model"
							]
						},
						"description": "Unloads the currently loaded trained model from the server."
					},
					"response": [
						{
							"name": "Model was sucessfully unloaded.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						}
					]
				},
				{
					"name": "Train a Rasa model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"train"
							],
							"query": [
								{
									"key": "save_to_default_model_directory",
									"value": "true"
								},
								{
									"key": "force_training",
									"value": "false"
								},
								{
									"key": "augmentation",
									"value": "50"
								},
								{
									"key": "num_threads",
									"value": "1"
								},
								{
									"key": "callback_url",
									"value": "https://example.com/rasa_evaluations",
									"description": "If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request."
								}
							]
						},
						"description": "Trains a new Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The new model is not loaded by default."
					},
					"response": [
						{
							"name": "Zipped Rasa model",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "filename",
									"value": "officia enim sunt non",
									"description": "File name of the trained model."
								},
								{
									"key": "Content-Type",
									"value": "application/octet-stream"
								}
							],
							"cookie": [],
							"body": "officia enim sunt non"
						},
						{
							"name": "The incoming request specified a `callback_url` and hence the request will return immediately with an empty response. The actual response will be sent to the provided `callback_url` via POST request.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": \"language: en\\npipeline: supervised_embeddings\\npolicies:\\n  - name: MemoizationPolicy\\n  - name: TEDPolicy\",\n    \"domain\": \"intents:\\n  - greet\\n  - goodbye\\n  - affirm\\n  - deny\\n  - mood_great\\n  - mood_unhappy\\n\\nresponses:\\n  utter_greet:\\n  - text: \\\"Hey! How are you?\\\"\\n\\n  utter_cheer_up:\\n  - text: \\\"Here is something to cheer you up:\\\"\\n    image: \\\"https://i.imgur.com/nGF1K8f.jpg\\\"\\n\\n  utter_did_that_help:\\n  - text: \\\"Did that help you?\\\"\\n\\n  utter_happy:\\n  - text: \\\"Great carry on!\\\"\\n\\n  utter_goodbye:\\n  - text: \\\"Bye\\\"\",\n    \"nlu\": \"- intent: greet\\n  examples: |\\n    - hey\\n    - hello\\n    - hi\\n\\n- intent: goodbye\\n  examples: |\\n    - bye\\n    - goodbye\\n    - have a nice day\\n    - see you\\n\\n- intent: affirm\\n  examples: |\\n    - yes\\n    - indeed\\n\\n- intent: deny\\n  examples: |\\n    - no\\n    - never\\n\\n- intent: mood_great\\n  examples: |\\n    - perfect\\n    - very good\\n    - great\\n\\n- intent: mood_unhappy\\n  examples: |\\n    - sad\\n    - not good\\n    - unhappy\",\n    \"responses\": \"chitchat/ask_name: - text: my name is Sara, Rasa's documentation bot! chitchat/ask_weather: - text: it's always sunny where I live\",\n    \"stories\": \"- story: happy path\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_great\\n  - action: utter_happy\\n\\n- story: sad path 1\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: affirm\\n  - action: utter_happy\\n\\n- story: sad path 2\\n  steps:\\n  - intent: greet\\n  - action: utter_greet\\n  - intent: mood_unhappy\\n  - action: utter_cheer_up\\n  - action: utter_did_that_help\\n  - intent: deny\\n  - action: utter_goodbye\\n\\n- story: say goodbye\\n  steps:\\n  - intent: goodbye\\n  - action: utter_goodbye\",\n    \"force\": false,\n    \"save_to_default_model_directory\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Predict an action on a temporary state",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"predict"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain."
								}
							]
						},
						"description": "Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"scores\": [\n  {\n   \"action\": \"utter_greet\",\n   \"score\": 1\n  },\n  {\n   \"action\": \"utter_greet\",\n   \"score\": 1\n  }\n ],\n \"policy\": \"policy_2_TEDPolicy\",\n \"tracker\": {\n  \"conversation_id\": \"default\",\n  \"slots\": [\n   {\n    \"slot_name\": \"slot_value\"\n   },\n   {\n    \"slot_name\": \"slot_value\"\n   }\n  ],\n  \"latest_message\": {\n   \"text\": \"Hello!\",\n   \"entities\": [\n    {\n     \"start\": -84996613,\n     \"end\": -32039430,\n     \"value\": \"co\",\n     \"entity\": \"sit magna voluptate laborum\",\n     \"confidence\": -32604998.73194869\n    },\n    {\n     \"start\": 49081549,\n     \"end\": 53549111,\n     \"value\": \"commodo non sunt sed\",\n     \"entity\": \"ullamco non minim\",\n     \"confidence\": 72078627.2102516\n    }\n   ],\n   \"intent\": {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n   },\n   \"intent_ranking\": [\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    },\n    {\n     \"confidence\": 0.6323,\n     \"name\": \"greet\"\n    }\n   ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"qui sit est ut\",\n  \"paused\": false,\n  \"events\": [\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   },\n   {\n    \"event\": \"slot\",\n    \"timestamp\": 1559744410\n   }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n   \"action_name\": \"Duis est nulla officia sed\",\n   \"action_text\": \"dolore officia ipsum\"\n  },\n  \"active_loop\": {\n   \"name\": \"restaurant_form\"\n  }\n }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    },\n    {\n        \"event\": \"slot\",\n        \"timestamp\": 1559744410\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Parse a message using the Rasa model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"parse"
							],
							"query": [
								{
									"key": "emulation_mode",
									"value": "LUIS",
									"description": "Specify the emulation mode."
								}
							]
						},
						"description": "Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"text\": \"Hello!\",\n \"entities\": [\n  {\n   \"start\": -53387765,\n   \"end\": 10465607,\n   \"value\": \"laboris consectetur u\",\n   \"entity\": \"eu\",\n   \"confidence\": 12576700.66571781\n  },\n  {\n   \"start\": 69456123,\n   \"end\": -90012674,\n   \"value\": \"ad nulla dolor sunt incididunt\",\n   \"entity\": \"nostrud incididunt consectetur consequat\",\n   \"confidence\": -21469425.905608565\n  }\n ],\n \"intent\": {\n  \"confidence\": 0.6323,\n  \"name\": \"greet\"\n },\n \"intent_ranking\": [\n  {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  },\n  {\n   \"confidence\": 0.6323,\n   \"name\": \"greet\"\n  }\n ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"BadRequest\",\n \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello, I am Rasa!\",\n    \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
						}
					]
				}
			]
		},
		{
			"name": "Health endpoint of Rasa Server",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "This URL can be used as an endpoint to run health checks against. When the server is running this will return 200."
			},
			"response": [
				{
					"name": "Up and running",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": "Hello from Rasa: 1.0.0"
				}
			]
		},
		{
			"name": "Version of Rasa",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/version",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Returns the version of Rasa."
			},
			"response": [
				{
					"name": "Version of Rasa",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"minimum_compatible_version\": \"1.0.0\"\n}"
				}
			]
		},
		{
			"name": "Status of the Rasa server",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "value",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				},
				"description": "Information about the server and the currently loaded Rasa model."
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"fingerprint\": {\n  \"config\": [\n   \"7625d69d93053ac8520a544d0852c626\"\n  ],\n  \"domain\": [\n   \"229b51e41876bbcbbbfbeddf79548d5a\"\n  ],\n  \"messages\": [\n   \"cf7eda7edcae128a75ee8c95d3bbd680\"\n  ],\n  \"stories\": [\n   \"b5facea681fd00bc7ecc6818c70d9639\"\n  ],\n  \"trained_at\": 1556527123.42784,\n  \"version\": \"1.0.0\"\n },\n \"model_file\": \"20190429-103105.tar.gz\",\n \"num_active_training_jobs\": 2\n}"
				},
				{
					"name": "User is not authenticated.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
				},
				{
					"name": "User has insufficient permission.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
				},
				{
					"name": "The request conflicts with the currently loaded model.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"Conflict\",\n \"message\": \"The request conflicts with the currently loaded model.\",\n \"code\": 409\n}"
				}
			]
		},
		{
			"name": "Retrieve the loaded domain",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "value",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/domain",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"domain"
					]
				},
				"description": "Returns the domain specification the currently loaded model is using."
			},
			"response": [
				{
					"name": "Domain was successfully retrieved.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"config\": {\n  \"store_entities_as_slots\": false\n },\n \"entities\": [\n  \"person\",\n  \"location\"\n ],\n \"slots\": {},\n \"responses\": {},\n \"actions\": [\n  \"action_greet\",\n  \"action_goodbye\",\n  \"action_listen\"\n ]\n}"
				},
				{
					"name": "User is not authenticated.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthenticated\",\n \"message\": \"User is not authenticated to access resource.\",\n \"code\": 401\n}"
				},
				{
					"name": "User has insufficient permission.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"NotAuthorized\",\n \"message\": \"User has insufficient permission to access resource.\",\n \"code\": 403\n}"
				},
				{
					"name": "Invalid header provided.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"failure\",\n \"reason\": \"InvalidHeader\",\n \"message\": \"Invalid header was provided with the request.\",\n \"code\": 406\n}"
				},
				{
					"name": "An unexpected error occurred.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"version\": \"1.0.0\",\n \"status\": \"ServerError\",\n \"message\": \"An unexpected error occurred.\",\n \"code\": 500\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5005",
			"type": "string"
		}
	]
}